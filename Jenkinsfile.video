#!groovy

pipeline {
  agent {
    label 'regus'
  }

  options {
    buildDiscarder(logRotator(daysToKeepStr: '14'))
  }

  parameters {
    string(defaultValue: '', description: 'Web Server Address', name: 'WEBSERVER')
    string(defaultValue: '', description: 'Lecture File Name', name: 'FILENAME')
    string(defaultValue: '', description: 'Number of parts', name: 'NUMBER')
  }

  stages {

    stage('Get video file') {
      steps {
        script {
          sh "wget http://$WEBSERVER/$FILENAME"
        }
      }
    }

    stage('Split file') {
      steps {
        script {
          sh "./split_file.sh $FILENAME $NUMBER || true" // in how many chunks do we want to split FILENAME
        }
      }
    }

    stage('compress chunks') {
      steps {
        script {
          chunkList = [:]
          for( num in 0..params.NUMBER ) {
            chunkList[num] = compress("output${num}.mp4")
          }

          parallel chunkList
        }
      }
    }
  }
}

def compress(String FileName) {
  return {
    stage(FileName) {
      def branchName = scmResult.getBranches().get(0).getName()
      build(
        job: "Pipelines/lectures/compress",
        propagate: true, wait: true,
        parameters: [
          string(name: 'FILENAME', value: "${FileName}"),
        ]
      )
    }
  }
}
