#!groovy
import groovy.json.JsonOutput

pipeline {
  agent {
    label 'regus'
  }

  environment {
    KUBECONFIG = "/home/jenkins/.kube/config"
    //DOCKER_REGISTRY = "601303390846.dkr.ecr.us-east-1.amazonaws.com" // ???

    LOWERCASE_BRANCH="${BRANCH.toLowerCase()}"
    SUBDOMAIN = "${(params.NAMESPACE?.trim()?.toLowerCase()) ?: env.LOWERCASE_BRANCH}"
    NAMESPACE = "${SUBDOMAIN.replaceAll('^[0-9]', '').replaceAll('[^a-z0-9]', '-').replaceAll('-+', '-').replaceAll('(^-+|-+$)', '').take(63)}"
    NAMESPACE_SUBDOMAIN = "${NAMESPACE}.${CLUSTER}"
  }

  options {
    buildDiscarder(logRotator(daysToKeepStr: '14'))
    //disableConcurrentBuilds()
  }

  parameters {
    string(defaultValue: 'main', description: 'WebTech Branch Name', name: 'BRANCH', trim: true)
  }

  stages {
    stage('configure namespace') {
      steps {
        sh('./create_namespace.sh')
      }
    }

    stage('initialize apps') {
      environment {
        // TODO: we need somewhere "NOT" AWS to store settings
        HOSTED_ZONE_NAME = "webtech-fmi.bg"
      }
      steps {
        script {
          def scmResult = resolveScm(
            source: [
              $class: 'GitSCMSource', id: '_', credentialsId: 'github-webtech-jenkins',
              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait']],
              remote: "git@github.com:gstefanov-bg/webtech.git"
            ],
            targets: [env.BRANCH, 'main']
          )

          // invoke downstream job that should already exist from org scanner
          def branchName = scmResult.getBranches().get(0).getName()
          build(
            job: "gstefanov-bg/web-tech/${hudson.Util.rawEncode(branchName)}",
            propagate: true, wait: true,
          )
        }
      }
    }

    stage('wait for deployment') {
      steps {
        sh 'kubectl -n $NAMESPACE get deployments --no-headers=true | awk \'{print $1}\' | xargs -n1 kubectl rollout status deployment'
      }
    }
  }

  post {
    cleanup {
      cleanWs disableDeferredWipeout: true
      /* clean up our custom workspace */
      deleteDir()
      dir("${workspace}@tmp") {
        deleteDir()
      }
    }
  }
}
